// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Provisioning Appliance service definition.
syntax = "proto3";

package pa;

import "src/proto/crypto/cert.proto";
import "src/proto/crypto/common.proto";
import "src/proto/device_id.proto";

option go_package = "pa_go_pb";

// The ProvisioningApplianceService is a bridge service to a trusted SPM server.
service ProvisioningApplianceService {
  rpc InitSession(InitSessionRequest)
    returns (InitSessionResponse) {}
  rpc CloseSession(CloseSessionRequest)
    returns (CloseSessionResponse) {}
  rpc EndorseCerts(EndorseCertsRequest)
    returns (EndorseCertsResponse) {}
  rpc DeriveTokens(DeriveTokensRequest)
    returns (DeriveTokensResponse) {}
  rpc GetStoredTokens(GetStoredTokensRequest)
    returns (GetStoredTokensResponse) {}
  rpc GetCaSubjectKeys(GetCaSubjectKeysRequest)
    returns (GetCaSubjectKeysResponse) {}
  rpc GetCaCerts(GetCaCertsRequest)
    returns (GetCaCertsResponse) {}
  rpc GetOwnerFwBootMessage(GetOwnerFwBootMessageRequest)
    returns (GetOwnerFwBootMessageResponse) {}
  rpc RegisterDevice(RegistrationRequest)
    returns (RegistrationResponse) {}
}

// List of certificates to endorse and endorse key parameters.
message EndorseCertBundle {
  // Certificate signing key parameters. Required.
  crypto.cert.SigningKeyParams key_params = 1;
  // TBS certificate to be endorsed. Required.
  bytes tbs = 2;
}

// Endorse certs request.
message EndorseCertsRequest {
  // SKU identifier. Required.
  string sku = 1;
  // List of certificates to endorse. Required.
  repeated EndorseCertBundle bundles = 2;
  // Diversifier raw bytes used to derive the signing key. Required.
  bytes diversifier = 3;
  // Derived signature covering the raw `tbs` bytes inside the cert `bundles`.
  // The signture is generated using a MAC agorithm with the key derived from
  // the device ID and a secret key previously provisioned in the SPM and the
  // Device Under Test (DUT).
  bytes signature = 4;
}

message CertBundle {
  // Key label used to sign the certificate.
  string key_label = 1;
  // Endorsed certificate.
  crypto.cert.Certificate cert = 2;
}

// Endorse certs response.
message EndorseCertsResponse {
  // Array of complete (endorsed) certificates to be installed in a device.
  repeated CertBundle certs = 1;
}

// Token seed type (seed is provisioned into HSM).
enum TokenSeed {
  // Unspecified.
  TOKEN_SEED_UNSPECIFIED = 0;
  // Low Security: seed is rotated infrequently.
  TOKEN_SEED_LOW_SECURITY = 1;
  // High Security: seed is rotated frequently.
  TOKEN_SEED_HIGH_SECURITY = 2;
  // Keygen: seed is a new generic token seed. The SPM does not store the seed
  // in non-volatile memory.
  TOKEN_SEED_KEYGEN = 3;
}

// Token type.
enum TokenType {
  // Unspecified.
  TOKEN_TYPE_UNSPECIFIED = 0;
  // Raw.
  //
  // This format is used when the raw plaintext key must be generated.
  TOKEN_TYPE_RAW = 1;
  // Hashed.
  //
  // This format is used when the cSHAKE128 hashed (with "LC_CTRL" customization
  // string) form of the token needs to be generated. This type supports
  // provisioning of OpenTitan lifecycle tokens, which are programmed into a
  // device's OTP memory in this form.
  //
  // protolint:disable:next MAX_LINE_LENGTH
  // See https://opentitan.org/book/hw/ip/lc_ctrl/doc/theory_of_operation.html#token-hashing-mechanism
  // for more details.
  TOKEN_TYPE_HASHED_OT_LC_TOKEN = 2;
}

// Token size.
enum TokenSize {
  // Unspecified.
  TOKEN_SIZE_UNSPECIFIED = 0;
  // 128 bits.
  TOKEN_SIZE_128_BITS = 1;
  // 256 bits.
  TOKEN_SIZE_256_BITS = 2;
}

message TokenParams{
  // Token seed to use. Required.
  TokenSeed seed = 1;
  // Token type to generate. Required.
  TokenType type = 2;
  // Token size. Required.
  TokenSize size = 3;
  // Diversifier string to use in token derivation. Required.
  bytes diversifier = 4;
  // Returned wrapped seed in the response. Required.
  // The seed is wrapped with a public key associated with the SKU. The client
  // can use this seed to derive tokens in the future. Set to true if
  // using `TOKEN_SEED_KEYGEN`.
  bool wrap_seed = 5;
}

// Derive tokens request.
message DeriveTokensRequest{
  // SKU identifier. Required.
  string sku = 1;
  // Token parameters. Required.
  repeated TokenParams params = 2;
}

// Token.
message Token {
  // Token. Size is provided in the request.
  bytes token = 1;
  // Wrapped seed. Required if `wrap_seed` is set in the request.
  bytes wrapped_seed = 2;
}

// Derive tokens response.
message DeriveTokensResponse{
  // Keys. Size is provided in the request.
  repeated Token tokens = 1;
}

// Get stored tokens request.
message GetStoredTokensRequest{
  // SKU identifier. Required.
  string sku = 1;
  // Token identifiers. Required.
  repeated string tokens = 2;
}

// Get stored tokens response.
message GetStoredTokensResponse{
  // Tokens. Size is provided in the request.
  repeated bytes tokens = 1;
}

// Initialize SKU session request.
message InitSessionRequest {
  // SKU identifier. Required.
  string sku = 1;
  // SKU authentication token used to authenticate the client. This will be
  // moved to the authentication layer in the future. Required.
  string sku_auth = 2;
}

// Initialize SKU session response.
message InitSessionResponse {
  // SKU session token. Used to identify the client session. This will be moved
  // to the authentication layer in the future.
  string sku_session_token = 1;
  // PA endpoint. The client should select connections to this client to issue
  // any provisioning calls (e.g. DeriveTokens).
  string pa_endpoint = 2;
  // List of authenticate methods. Required.
  repeated string auth_methods = 3;
}

// Get CA serial numbers request.
message GetCaSubjectKeysRequest{
  // SKU identifier. Required.
  string sku = 1;
  // CA cert labels (to locate the key within the SPM). Required.
  repeated string cert_labels = 2;
}

// Get CA subject keys response.
message GetCaSubjectKeysResponse{
  // Subject keys. Size is fixed to 20 bytes (160-bits) per subject key as
  // this is the size of the CA key IDs used by the OpenTitan project.
  repeated bytes key_ids = 1;
}

// Get CA certs request.
message GetCaCertsRequest{
  // SKU identifier. Required.
  string sku = 1;
  // CA cert labels (to locate the key within the SPM). Required.
  repeated string cert_labels = 2;
}

// Get CA certs response.
message GetCaCertsResponse{
  // Array of CA certificates.
  repeated crypto.cert.Certificate certs = 1;
}

// Get owner firmware boot message request.
message GetOwnerFwBootMessageRequest{
  // SKU identifier. Required.
  string sku = 1;
}

// Get owner firmware boot message response.
message GetOwnerFwBootMessageResponse{
  // Boot message string.
  string boot_message = 1;
}

// Close SKU session request.
message CloseSessionRequest {
  // Empty.
}
// Close SKU session response.
message CloseSessionResponse {
  // Empty.
}

// Device Registration request.
message RegistrationRequest {
  // Device record. Required.
  ot.DeviceData device_data = 1;
  // Hash type of certificates (for integrity check). Required.
  crypto.common.HashType hash_type = 2;
  // Hash of certificates written to non-volatile storage on the DUT. Required.
  bytes certs_hash = 3;
}

// Device Registration reponse.
message RegistrationResponse {
  // Empty.
}
