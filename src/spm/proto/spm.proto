// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// Secure Provisioning Module service definitions.
syntax = "proto3";

package spm;

import "src/pa/proto/pa.proto";
import "src/proto/crypto/cert.proto";
import "src/proto/crypto/common.proto";
import "src/proto/device_id.proto";

option go_package = "spm_go_bp";

// The SpmService provides various cryptographic services to
// generate, harvest, and/or certify Device Under Test secrets.
service SpmService {
  // InitSession configures the SPM to handle provisioning commands for a
  // given SKU.
  rpc InitSession(pa.InitSessionRequest)
    returns (pa.InitSessionResponse) {}

  // DeriveTokens generates symmetric keys from the following inputs:
  //   - a seed type (that matches a seed pre-provisioned in the SPM),
  //   - a key type (raw or cSHAKE128 hashed OpenTitan LC token),
  //   - a size, and
  //   - a diversifier string.
  rpc DeriveTokens(pa.DeriveTokensRequest)
      returns (pa.DeriveTokensResponse) {}

  // GetCaSubjectKeys retrieves the CA certificate(s) subject keys for a
  // SKU.
  rpc GetCaSubjectKeys(pa.GetCaSubjectKeysRequest)
      returns (pa.GetCaSubjectKeysResponse) {}

  // GetCaCerts retrieves the CA certificate(s) for a SKU.
  rpc GetCaCerts(pa.GetCaCertsRequest)
      returns (pa.GetCaCertsResponse) {}

  // GetStoredTokens retrieves a token preprovisioned on the SPM.
  rpc GetStoredTokens(pa.GetStoredTokensRequest)
      returns (pa.GetStoredTokensResponse) {}

  // EndorseCerts endorses a set of certificates for a given SKU. The
  // certificates are signed with a CA private key stored in the SPM.
  rpc EndorseCerts(pa.EndorseCertsRequest)
      returns (pa.EndorseCertsResponse) {}

  // EndorseData endorses an arbitrary byte array for a given SKU. The data is
  // hashed and signed with a private key stored in the SPM.
  rpc EndorseData(EndorseDataRequest)
      returns (EndorseDataResponse) {}

  // VerifyDeviceData verifies the device data for a given SKU.
  rpc VerifyDeviceData(VerifyDeviceDataRequest)
      returns (VerifyDeviceDataResponse) {}

  // GetOwnerFwBootMessage retrieves the owner firmware boot message for a SKU.
  rpc GetOwnerFwBootMessage(pa.GetOwnerFwBootMessageRequest)
      returns (pa.GetOwnerFwBootMessageResponse) {}
}

// Endorse data request.
message EndorseDataRequest {
  // SKU identifier. Required.
  string sku = 1;
  // Signing key parameters. Required.
  crypto.cert.SigningKeyParams key_params = 2;
  // Data payload to endorse. Required.
  bytes data = 3;
}

// Endorse data response.
message EndorseDataResponse {
  // ASN.1 DER public key used to sign the data payload.
  bytes pubkey = 1;
  // ASN.1 DER signature of data payload.
  bytes signature = 2;
}

// Verify device data request.
message VerifyDeviceDataRequest {
  // Device data to verify. Required.
  ot.DeviceData device_data = 1;
  // Hash type of certificates (for integrity check). Required.
  crypto.common.HashType hash_type = 2;
  // Hash of certificates written to non-volatile storage on the DUT. Required.
  bytes certs_hash = 3;
}

// Verify device data response.
message VerifyDeviceDataResponse {
  // Empty message.
}
